			+----------------------------+
			|       EDA093/DIT401        |
			| LAB 1: SHELL PROGRAMMING   |
			|     DESIGN DOCUMENT        |
			+----------------------------+

---- GROUP 16 ----

David Olofsson <david.m.o@telia.com>
Rebecca Carlson <rm.carlson@hotmail.com>

---- PRELIMINARIES ----

Comments:
A fairly quick hackjob, since we are under pressure from a group project in
the parallell course. We hope it fulfills the requirements.
With any luck, the following ones will be better.

Additional sources:
Man-pages for the instructions, as well as a quick google to find some of them
by function.
A specific post on stackoverflow, referenced where used.


			   COMMAND SHELL
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

David Olofsson: ~ 10h
Focus: Efficiency and correctness, features always taking the back seat.

Rebecca Carlson: ~ 5h
Focus: Understanding, comprehension of new concepts, learning.



			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

David:
I loved the task. It has been very interesting and rewarding to work on it.
Especially nice was the list of useful functions you wrote up for it, it
helped a lot.

My one and only gripe is how the parser is frankly unreadable and not always
fully functional. The example of "wc -l > antalkonton < /etc/passwd" failed
because the -l flag was incorrectly parsed in some way, quite taking the wind
out of our sails.

Just put in some comments, some spacing and a clearer coding style (brackets,
please) and the parser will be way better. And perhaps reversing the direction
of the pgm linked list, so that it is possible to solve efficiently solve with
looping, since function calls in c are somewhat expensive (for the stack, mostly).

PS. I sat down and wrote this right before turning it in, so Rebecca had no
chance to give her comments.